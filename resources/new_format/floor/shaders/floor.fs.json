"precision mediump float;\nuniform sampler2D diffuseMap;\nuniform sampler2D normalMap;\nuniform sampler2D displaceMap;\nuniform samplerCube cubeMap;\nuniform vec4 materialAmbient;\nuniform vec4 materialDiffuse;\n\nvarying vec2 texCoord0;\nvarying vec3 eyeVec;\nvarying vec3 lightVec;\nvarying mat3 TBN;\nvarying mat3 TBNi;\n\nvec2 calcNewTexCoords(sampler2D displacementMap, vec2 tc, vec3 tsVec2Camera)\n{\n // Get height from height map\n float height = texture2D(displacementMap, tc).r;\n // Calculate new height based on surface thickness and bias\n float surfaceThickness = 0.5; // Thickness relative to width and height\n float bias = surfaceThickness * -0.5;\n float height_sb = height * surfaceThickness + bias;\n\n // Calculate new texture coordinate based on viewing angle\n vec2 parallaxTextureOffset = tc + height_sb * tsVec2Camera.xy / max(tsVec2Camera.z, 0.3);\n return parallaxTextureOffset;\n}\nvoid main(void)\n{\n vec3 tangentSpaceToEye = TBNi * -eyeVec;\n vec2 newCoords = calcNewTexCoords(displaceMap, texCoord0, tangentSpaceToEye);\n\n vec4 texColor = texture2D(diffuseMap, newCoords);\n vec3 bump = texture2D(normalMap, newCoords).rgb * 2.0 - 1.0;\n\n vec3 normal = TBN * bump;\n float NdotL = dot(normal, normalize(lightVec));\n\n float diffuse = max(NdotL, 0.0 );\n vec4 intensity = diffuse * materialDiffuse + materialAmbient;\n\n gl_FragColor = texColor * intensity;\n}"