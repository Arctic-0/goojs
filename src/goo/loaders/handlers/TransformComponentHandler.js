// Generated by CoffeeScript 1.6.2
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['goo/loaders/handlers/ComponentHandler', 'goo/entities/components/TransformComponent', 'goo/math/MathUtils', 'goo/util/rsvp', 'goo/util/PromiseUtil', 'goo/lib/underscore'], function(ComponentHandler, TransformComponent, MathUtils, RSVP, pu) {
  var TransformComponentHandler, _ref;

  return TransformComponentHandler = (function(_super) {
    __extends(TransformComponentHandler, _super);

    function TransformComponentHandler() {
      _ref = TransformComponentHandler.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    TransformComponentHandler._register('transform');

    TransformComponentHandler.prototype._prepare = function(config) {
      return _.defaults(config, {
        translation: [0, 0, 0],
        rotation: [0, 0, 0],
        scale: [1, 1, 1]
      });
    };

    TransformComponentHandler.prototype._create = function(entity, config) {
      var component;

      component = new TransformComponent();
      return entity.setComponent(component);
    };

    TransformComponentHandler.prototype.update = function(entity, config) {
      var component,
        _this = this;

      component = TransformComponentHandler.__super__.update.call(this, entity, config);
      component.transform.translation.set(config.translation);
      component.transform.setRotationXYZ(MathUtils.radFromDeg(config.rotation[0]), MathUtils.radFromDeg(config.rotation[1]), MathUtils.radFromDeg(config.rotation[2]));
      component.transform.scale.set(config.scale);
      if (config.parentRef != null) {
        console.log("Found a parentref, getting...");
        this.getConfig(config.parentRef).then(function(parentConfig) {
          return _this.updateObject(config.parentRef, parentConfig, _this.options).then(function(parent) {
            var _ref1;

            if ((parent != null) && ((_ref1 = component.parentRef) != null ? _ref1.entity : void 0) !== parent) {
              console.log("Adding parent " + config.parentRef);
              return parent.transformComponent.attachChild(component);
            } else if (parent != null) {
              return console.log("Parent is already set");
            } else {
              return console.warn("Could not find parent with ref " + config.parentRef);
            }
          });
        });
      }
      component.setUpdated();
      return pu.dummyPromise(component);
    };

    TransformComponentHandler.prototype.remove = function(entity) {
      var component;

      component = entity.transformComponent;
      component.transform.translation.set(0, 0, 0);
      component.transform.setRotationXYZ(0, 0, 0);
      component.transform.scale.set(1, 1, 1);
      return component.setUpdated();
    };

    return TransformComponentHandler;

  })(ComponentHandler);
});
