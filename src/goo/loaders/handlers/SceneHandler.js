// Generated by CoffeeScript 1.4.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['goo/loaders/handlers/ConfigHandler', 'goo/util/rsvp', 'goo/util/PromiseUtil'], function(ConfigHandler, RSVP, pu) {
  var SceneHandler;
  return SceneHandler = (function(_super) {

    __extends(SceneHandler, _super);

    function SceneHandler() {
      return SceneHandler.__super__.constructor.apply(this, arguments);
    }

    SceneHandler._register('scene');

    SceneHandler.prototype._prepare = function(config) {};

    SceneHandler.prototype._create = function(ref) {};

    SceneHandler.prototype.update = function(ref, config) {
      var entityRef, promises, _fn, _i, _len, _ref, _ref1,
        _this = this;
      promises = [];
      if ((_ref = config.entityRefs) != null ? _ref.length : void 0) {
        _ref1 = config.entityRefs;
        _fn = function(entityRef) {
          return promises.push(_this.getConfig(entityRef).then(function(entityConfig) {
            return _this.updateObject(entityRef, entityConfig, _this.options);
          }));
        };
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          entityRef = _ref1[_i];
          _fn(entityRef);
        }
        return RSVP.all(promises).then(function(entities) {
          var entity, _j, _len1, _ref2, _results;
          if (!((_ref2 = _this.options.beforeAdd) != null ? _ref2.apply : void 0) || _this.options.beforeAdd(config)) {
            _results = [];
            for (_j = 0, _len1 = entities.length; _j < _len1; _j++) {
              entity = entities[_j];
              console.log("Adding " + entity.ref + " to world");
              _results.push(entity.addToWorld());
            }
            return _results;
          }
        }).then(null, function(err) {
          return console.error("Error updating entities: " + err);
        });
      } else {
        console.warn("No entity refs in scene " + ref);
        return config;
      }
    };

    return SceneHandler;

  })(ConfigHandler);
});
