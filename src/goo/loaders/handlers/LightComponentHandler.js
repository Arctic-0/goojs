// Generated by CoffeeScript 1.6.2
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['goo/loaders/handlers/ComponentHandler', 'goo/entities/components/LightComponent', 'goo/renderer/light/PointLight', 'goo/math/Vector', 'goo/util/rsvp', 'goo/util/PromiseUtil', 'goo/util/ConsoleUtil', 'goo/lib/underscore'], function(ComponentHandler, LightComponent, PointLight, Vector, RSVP, pu, console) {
  var LightComponentHandler, _ref;

  return LightComponentHandler = (function(_super) {
    __extends(LightComponentHandler, _super);

    function LightComponentHandler() {
      _ref = LightComponentHandler.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    LightComponentHandler._register('light');

    LightComponentHandler.prototype._prepare = function(config) {
      _.defaults(config, {
        direction: [0, 0, 0],
        color: [1, 1, 1, 1],
        attenuate: true,
        shadowCaster: false
      });
      if (config.shadowCaster) {
        return _.defaults(config.shadowSettings, {
          type: 'Blur'
        });
      }
    };

    LightComponentHandler.prototype._create = function(entity, config) {
      var component;

      component = new LightComponent(new PointLight());
      entity.setComponent(component);
      return component;
    };

    LightComponentHandler.prototype.update = function(entity, config) {
      var component, key, light, value;

      component = LightComponentHandler.__super__.update.call(this, entity, config);
      light = component.light;
      for (key in config) {
        value = config[key];
        if (light.hasOwnProperty(key)) {
          if (light[key] instanceof Vector) {
            light[key].set(value);
          } else {
            light[key] = _.clone(value);
          }
        }
      }
      return pu.dummyPromise(component);
    };

    return LightComponentHandler;

  })(ComponentHandler);
});
